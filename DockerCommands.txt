
To crete tag 
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]

docker tag myimage:latest myrepository/myimage:v1.0

To push tag into repository 
docker push myrepository/myimage:v1.0

To build docker image 
How to check for Docker Client and Docker Server version
docker version

 How do you get the number of containers running, paused and stopped?
docker info
You can get the number of containers running, paused, stopped, the number of images and a lot more.

 How to build a Dockerfile?
 docker build path to docker file

Once youâ€™ve worked with an image, how do you push it to docker hub?
 docker push username/image name

How to pull an image from docker hub onto your local system
docker pull image_name

 How do you create a docker container from an image?
 docker run -it -d  image_name 
-d means the container needs to start in the detached mode. Logs will not be seen in command prompt rather it will run in background like daemon thread
The -it (--interactive + --tty ) options tells Docker to keep the standard input attached to the terminal and starts the container in the interactive mode. 

How do you list all the running containers
docker ps
docker ps -a - show all the running and exited containers

 Suppose you have 3 containers running and out of these, you wish to access one of them. How do you access a running container?
docker exec -it  container id  bash
The following command lets us access a running container


 How to debug / see logs of our Docker containers.
docker logs  container_id 

How to start, stop and kill a container?
docker start  container_id 
docker stop  container_id 
docker kill  container_id 
docker rm  container id  - delete a stopped container:

To display docker containers 
docker ps 

to display sotped containers 
docker ps -a

To remove container 
docker rm <containerId>

How to delete an image from the local storage system?
docker rmi  image-id 

lists all the locally stored docker images
docker images


How  to know the details of the list of networks in the cluster
docker network ls

---------------------------
dockerize spring boot +sql appln
----------------------------------------------
 pull mysql image 
 docker pull mysql
 
 To run the sql container 
 docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=mydb -p 3306:3306 mysql
 
 note:- by default user name and password is root
 
 create a network to communicate springboot app and mysql database 

 docker network create spring-sql-net

docker network ls

To interact each other 
docker run --name sqldb --network spring-sql-net -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=payroll -e MYSQL_USER=root -e MYSQL_PASSWORD=1234 -d mysql

*** docker run --name mysqldb -P 3307:3306 --network spring-sql-net -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=payroll -d mysql

docker exec -it 565347a31675<containerid> bash

mysql -u<usename> -p<password>

docker build -t payroll .

docker run --network spring-sql-net --name spring-sql-container -p 8080:8080 -d payroll

To know container ip addres
docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_name_or_id>

docker-compose up --build




To install  docker on ubuntu
curl  -fsSL  get.docker.com  | /bin/bash

To run the docker container 

docker run -p 3400:8081 ashokit/spring-boot-rest-api
-p <host-port>:<container-port>

To run the docker container ditached mode 

docker run -d -p 3400:8081 ashokit/spring-boot-rest-api

note* -d indicates that ditached mode 


Dockerfile
----------
FROM 
MAINTAINER
COPY
WORKDIR
RUN
CMD
EXPOSE
ENTRYPOINT
VOLUME
ARG

=> FROM is used to specify base image to create our image
FROM open-jdk:11
FROM python:3.3
FROM tomcat:9.5
FROM node:15.1

=> MAINTAINER is used to specify Dockerfile Author
MAINTAINER Ashok<ashok@gmail.com>

=> COPY is used to copy the files from source to destination

COPY target/sb-api.jar  /usr/app/sb-api.jar
COPY target/app.war  /usr/tomcat/webapps/app.war

=> ADD is used to copy the files from source to destination
ADD   <url>  /usr/tomcat/webapps/app.war

note* s3 bucket url like 

=>RUN is used to execute instructions while creating docker image

 # Install app dependencies  || single 
   RUN npm install
   
 # Install app dependencies  || Multiple 
  RUN npm install -g some-package && \
      npm install -g another-package && \
      apt-get update && \
      apt-get install -y some-package-for-apt
	  
	 

=>RUN is used to execute instructions while creating docker container

  CMD java -jar <jarFileName>


Docker Compose
--------------
Docker Compose is a tool which is used to manage multi container based application.
We can create multiple containers at a time by using Docker Compose. 
Using Docker Compose we can define dependencies among the containers.
Ex: App Container Depends On DB Container

We will provide containers information to Docker Compose tool using docker-compose.yml
Docker Compose yml file contains below elements
version:  It represents version number 
services: It represents containers information
volumes: It represents storage
network: it represents connectivity

# Create Docker Containeworkr using Docker Compose YML
$ docker-compose up
$ docker-compose down
$ docker-compose stop
$ docker-compose ps




To create Instance of dcoker db in my sql work bench 
----------------------------------------------------


1)Configure EC2 Security Group
In the "Inbound rules" tab, add a new rule:

Type: MySQL/Aurora (3306)
Source: Your local IP address or the IP range that you want to allow access from.


2)Get the Public IP Address of Your EC2 Instance
  ex:13.232.198.240

3)MySQL Workbench Configuration

Open MySQL Workbench on your local machine.

Click on "Database" in the top menu, then select "Connect to Database."

In the "Connect to Database" window, configure the following settings:

Connection Name: Provide a name for your connection (e.g., "EC2 MySQL").

Connection Method: Select "Standard TCP/IP over SSH."

SSH Hostname: Enter the public IP address or DNS name of your EC2 instance.

SSH Username: Enter the SSH username for the EC2 instance (e.g., "ubuntu" for an Ubuntu instance).

SSH Key File: Click the "..." button and select the private key (.pem) file associated with your EC2 instance.

MySQL Hostname: Set it to "127.0.0.1."

you will get this by executing this command
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container name or Image name>

MySQL Server Port: Leave it as the default 3306.

Username: Enter your MySQL username (e.g., "root").

Password: Enter your MySQL password (the one you set when creating the MySQL container).

*** you want to run the container
docker run -d --name mysqldb -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=mydb -p 3306:3306 mysql



